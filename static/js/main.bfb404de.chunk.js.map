{"version":3,"sources":["components/Title/title.component.jsx","firebase/config.js","hooks/useStorage.js","components/progressBar/progress-bar.component.jsx","components/uploadForm/upload-form.component.jsx","hooks/useFirestore.js","components/imageGrid/imageGrid.component.jsx","components/Modal/modal.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","projectstorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","props","types","type","onChange","e","selectedFile","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","motion","div","layout","whileHover","opacity","s","onClick","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","classList","contains","y","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfb404de.chunk.js","sourcesContent":["import React from 'react';\nimport './title.styles.css';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>NADA MOHAFID</h1>\n      <h2>Pictures</h2>\n      <p>Hey Hey and Welcome To Nada Mohafid Best Gallery Love u</p>\n    </div>\n  )\n}\n\nexport default Title;\n","import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyARuHbFSWa1VTYbTCzBKJBMe9IBy4jIi8Y\",\n  authDomain: \"nada-gallery.firebaseapp.com\",\n  projectId: \"nada-gallery\",\n  storageBucket: \"nada-gallery.appspot.com\",\n  messagingSenderId: \"342633615215\",\n  appId: \"1:342633615215:web:7a453fae311d044e14629a\",\n  measurementId: \"G-NC59VKLMWE\"\n};\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n//create storage\n  const projectstorage = firebase.storage();\n  //create store\n  const projectFirestore = firebase.firestore();\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectstorage , projectFirestore , timestamp };\n","import  {useState, useEffect} from 'react';\nimport { projectstorage , projectFirestore , timestamp} from '../firebase/config';\n\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error ,setError] = useState(null);\n  const [url , setUrl] = useState(null);\n\n  useEffect(()=> {\n    //references\n    const storageRef = projectstorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n\n    storageRef.put(file).on('state_changed',(snap)=>{\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n    },(err)=>{\n      setError(err);\n    },async()=>{\n        const url = await storageRef.getDownloadURL();\n        const createdAt = timestamp();\n        collectionRef.add({url, createdAt });\n        setUrl(url);\n    });\n\n  },[file]);\n\n  return {progress , url ,error}\n}\n\nexport default useStorage;\n","import React, {useEffect} from 'react';\nimport './progress-bar.styles.css';\nimport useStorage from '../../hooks/useStorage';\n\nconst ProgressBar = ({file,setFile}) => {\n  const {url , progress} = useStorage(file);\n  useEffect(()=>{\n    if(url){\n      setFile(null);\n    }\n  },[url,setFile])\n  return (\n    <div className=\"progress-bar\" style={{ width : progress + '%'}}>\n\n    </div>\n  )\n}\n\nexport default ProgressBar;\n","import React, {useState} from 'react';\nimport './upload-form.styles.css';\nimport ProgressBar from '../progressBar/progress-bar.component';\n\nconst UploadForm = (props) => {\n  const [file,setFile] = useState(null);\n  const [error , setError] = useState(null);\n  const types = ['image/png','image/jpeg','image/jpg'];\n\n  const changeHandler = (e)=>{\n    let selectedFile = e.target.files[0];\n    if(selectedFile && types.includes(selectedFile.type)){\n        setFile(selectedFile);\n        setError('');\n      }\n    else{\n      setFile(null);\n      setError('Please select an image file (png | jpeg | jpg) !!');\n    }\n  }\n  return (\n\n      <form>\n        <label>\n        <input type=\"file\" onChange={changeHandler} />\n          <span>+</span>\n      </label>\n        <div className = \"output\">\n          {  error && <div className=\"error\">{error} </div>  }\n          { file && <div> {file.name} </div> }\n          { file && <ProgressBar file={file} setFile={setFile} />}\n        </div>\n      </form>\n\n  )\n}\n\nexport default UploadForm;\n","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(snap => {\n        let documents = [];\n        snap.forEach(doc => {\n          documents.push({...doc.data(), id: doc.id});\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n\n  return { docs };\n}\n\nexport default useFirestore;\n","import React from 'react';\nimport './imageGrid.styles.css';\nimport { motion } from 'framer-motion';\nimport useFirestore from '../../hooks/useFirestore';\n\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore('images');\n  return (\n    <div className=\"img-grid\">\n     {docs && docs.map(doc => (\n       <motion.div className=\"img-wrap\" key={doc.id}\n         layout\n         whileHover={{ opacity: 1 }}s\n         onClick={() => setSelectedImg(doc.url)}\n       >\n         <motion.img src={doc.url} alt=\"uploaded pic\"\n           initial={{ opacity: 0 }}\n           animate={{ opacity: 1 }}\n           transition={{ delay: 1 }}\n         />\n       </motion.div>\n     ))}\n   </div>\n  )\n}\n\nexport default ImageGrid;\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport './moda.styles.css';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\"\n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;\n","import './App.css';\nimport Title from './components/Title/title.component';\nimport UploadForm from './components/uploadForm/upload-form.component';\nimport ImageGrid from './components/imageGrid/imageGrid.component';\nimport Modal from './components/Modal/modal.component';\nimport {useState} from 'react';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}  />\n      { selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}